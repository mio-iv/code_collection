Django

WebサーバーはWebブラウザーからリクエストを受け取りレスポンスを返します
Webアプリケーションフレームワークの「Django（ジャンゴと発音）」

動的コンテンツを作るには→

【データを保存する仕組み（データベース）】
「KVS（Key-Value Store）」（NoSQLの一種）
全データをメモリー上で管理し、超高速検索と登録が可能

【サービスを実現するためのロジック（サーバーサイドアプリケーション）】
Python／Java／PHP／Perl
最近はコンパイル不要のスクリプト言語が使われることが多いため、「サーバーサイドスクリプト」と説明する場合も
（「WEBアプリケーション」や「WEBアプリ」も同義）


サーバー側で実行されるプログラムを「サーバーサイドアプリケーション」と呼ぶ。
（一方でWebブラウザー上で動作するプログラムは「クライアントサイドアプリケーション」と呼ばれる。）


【Webアプリケーションのデザインパターン（設計のパターン）】
---------------------------------------------------------------------------
MVCアーキテクチャー:Model／View／Controller
----------------------------------------------
Controller	：Webブラウザーからリクエストを受け取り処理内容を決定する
Model		：データベースと接続し処理内容に基づきデータ連携を行う
View		：データベースから抽出したデータをもとにHTMLドキュメントを作成する
---------------------------------------------------------------------------

Controllerは、クライアントのWebブラウザーから送信されてきたデータを解釈しModelにデータを渡す
ModelはDBと連携し処理を行いModelの状態を更新
Modelの処理が終了後、ControllerがViewに対して処理を指示。
ViewはModelの状態を取得してHTMLドキュメントを作成し、WebブラウザにHTMLドキュメントを返す

※最近はModelとViewを仲介する「Presenter」や「ModelView」を含んだ
「MVP（Model／View／Presenter）」「MVVM（Model／View／ViewModel）」のようなアーキテクチャーも


【フレームワークの活用】
ユーザー認証（サインアップ、サインイン、サインアウト）、管理者用の画面、フォーム、ファイルのアップロードなど
Java：Servlet、JSP、Struts
Ruby：Ruby on rails
Python：Django（無料でオープンソース）


【Djangoの機能】
機能→
MVCモデル
ユーザー認証
WEBフォームの送受信
データベース連携
管理用サイト
セキュリティー
国際化
...等々
キャッシュシステムの「memcached」を備えているため、高速に動作する。
InstagramやPinterestなど

Djangoで公式にサポートされているデータベース
PostgreSQL、MySQL、SQLite、Oracle
※非サポートのデータベースもサードパーティー製のアダプターを使用することで連携可能


【Djangoの開発思想】
Loose coupling（疎結合）
Less code（コード量の低減）
Quick development（迅速な開発）
DRY (Don’t repeat yourself) 則


【DjangoのMTVアーキテクチャー】
MVCアーキテクチャーの替わり
MVCのView → Djangoでは「Template」（どう見せるか）
MVCのController →Djangoでは「View」（どのデータを提示するか）

View		クライアントのWebブラウザーから送信されてきたデータを解釈しModelにデータを渡す
Model		DBと連携し処理を行いModelの状態を更新
		Modelの処理が終了後、ViewがTemplateに対して処理を指示。
Template	Modelの状態を取得してHTMLドキュメントを作成し、WebブラウザにHTMLドキュメントを返す


Djangoの「Template」はテンプレートエンジンによって実現
HTMLを直接書くと記述がふくざつになるため、テンプレート専用言語を採用













