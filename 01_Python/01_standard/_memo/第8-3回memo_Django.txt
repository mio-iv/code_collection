「公式リリース版」をインストール
◯------------------------------------◯
$ pip install django
◯------------------------------------◯

Djangoのバージョン確認
◯------------------------------------◯
>>> import django
>>> django.get_version()
◯------------------------------------◯

【Djangoを使ってWebアプリケーションを開発する手順】
1.Djangoプロジェクトを作成する
2.設定ファイルを修正する
3.Webアプリケーションを作成しDjangoプロジェクトに登録する
4.Viewを定義する
5.URLディスパッチャーを設定する
6.開発サーバーを起動する
7.動作確認

注：
Pythonコードや設定ファイルに日本語を挿入する場合は、文字コードを「UTF-8」にしてファイルを保存

【1.Djangoプロジェクトを作成する】
1つのプロジェクトには複数のWebアプリケーションを登録し管理することができる。

◯---コマンド--------------------------◯
※プロジェクト名を「mysite」とした場合
$ django-admin startproject mysite
◯------------------------------------◯

mysite/		#プロジェクトルートディレクトリ「mysite」
├── manage.py	プロジェクトに対する操作を行うためのコマンドラインユーティリティ
└── mysite/	プロジェクトのPythonパッケージとなるディレクトリ
    |		Pythonコード中の「import」文に使用する名前にもなる。（たとえば「import mysite.urls」
    ├── asgi.py		ASGI（非同期サーバーゲートウェイインターフェイス）のためのファイル
    ├── __init__.py	空のファイル（このディレクトリーがPythonパッケージとして使うために必要）
    ├── settings.py	Djangoプロジェクトの設定ファイル。
    ├── urls.py		プロジェクトのURL定義ファイル
    |			サイトの「目次」に相当し、URLディスパッチャー作成時に使用。
    └── wsgi.py		プロジェクトをサーブするためのWSGI互換Webサーバーとのエントリーポイント。



【2.設定ファイルを修正する】
settings.py」を修正し、言語コードやタイムゾーンを設定
標準では日本で使われる設定になっていない。
データベースをWebアプリケーションで使用する場合、データベースサーバーとの連携に必要な設定も。
◯------------------------------------◯
LANGUAGE_CODE = 'ja'
TIME_ZONE = 'Asia/Tokyo'
◯------------------------------------◯


【3.Webアプリケーションを作成しDjangoプロジェクトに登録する】
manage.pyでWebアプリケーションを作成
◯------------------------------------◯
プロジェクトディレクトリに移動しているものとする。
Webアプリケーション名は「myapp」とする。
$ python manage.py startapp myapp
◯------------------------------------◯

mysite/                #プロジェクトディレクトリー「mysite」
├── manage.py
├── myapp/          #Webアプリケーション「myapp」ディレクトリー
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── migrations/
│   ├── models.py	Model定義をするためのファイル
│   ├── tests.py		UnitTestを記述するためのファイル
│   └── views.py 	Viewを定義するためのファイル
└── mysite/


作成したWebアプリケーションを「mysite」プロジェクトに組み込むために、
「mysite」プロジェクトの「settings.py」ファイルに1行追加します。

INSTALLED_APPS
に、作成したアプリケーション名を追加。
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "myapp",                       #追加
]



【4.Viewを定義する】View：データベースから抽出したデータをもとにHTMLドキュメントを作成する
Webアプリケーション「myapp」ディレクトリー内「views.py」を操作
一部追加


【5.URLディスパッチャーを設定する】
Webブラウザーで「http://サーバーのアドレス/myapp」にアクセスした際、
Viewで定義した「def index(request):...」を実行するようURLディスパッチャーを作成

URLディスパッチャーの定義
Webサイト分
	：Djangoプロジェクトディレクトリー下の「mysite」ディレクトリー内のURLディスパッチャー（urls.py）
Webアプリケーション分
：「myapp」ディレクトリー内のURLディスパッチャー（urls.py）（新規作成）
どのURLをどのViewに対応させるのか定義する必要がある。
「views.py」ファイル内で定義した「index」や「foo」にアクセスできるようにする。


【6.開発サーバーを起動する】
PC上の開発環境上のサーバーを起動
「manage.py」があるディレクトリーに移動し、次のようにコマンドを実行します。
◯------------------------------------◯
$ python manage.py runserver
◯------------------------------------◯

TemplateやModelを使用していない場合、警告メッセージ（You have 18 unapplied migration(s)....）が出力されるが、
Webサーバーは正常に起動する。
DjangoにはPythonで書かれた軽量なWebサーバー機能が内包されているため、
ApacheのようなWebサーバーを開発段階で別途用意する必要はない。
開発が終了し、本番環境に移行する際には、別途Webサーバーが必要。
※Djangoに内包されているPythonで書かれたWebサーバーを「開発サーバー」と呼ぶことにする。

開発サーバーの停止には、「ctrl+C」

デフォルトでは開発サーバーはTCPポート 8000番で起動。
サービスポート番号を変更したい場合は、別途コマンドライン引数でポート番号を指定
◯------------------------------------◯
$ python manage.py runserver 8080
◯------------------------------------◯


【7.動作確認】
http://127.0.0.1:8000/myapp/
http://127.0.0.1:8000/myapp/foo
にアクセス。※ポート番号を設定した場合には適宜よみかえる。



【】
python manage.py startapp myapp

