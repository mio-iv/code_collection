Modelは「どういったデータを扱うか」
Templateは「どう見せるか」
Viewは「どうデータを制御するか」

複雑なHTML文章になると、HTMLタグとPythonコードが紛れてしまい、可読性が悪くなる
PythonコードからHTML文章を分離するには、Templateを使う
（テンプレートエンジンによって実現）



Templateファイルを保存する「templates」ディレクトリーを作成
テンプレートを保存するディレクトリーとして使えるよう、Djangoプロジェクトの設定ファイル「settings.py」に記述
Templateファイルを作成する（「templates」ディレクトリーに「index.html」ファイルを新規に作成

Viewを修正しTemplateファイルを使ってレスポンスするようコードを追加

Viewが直接Webブラウザーにレスポンスを送信する場合は「return HttpResponse("HTMLドキュメント")」
とHttpResponse( )を返していますが、
Templateに処理を渡す場合は、
「return render(request, 'テンプレートファイル名')」と、render( )を返します。

設定を反映するため開発サーバーを起動（または再起動）します。


========================================
Modelはデータベースへのアクセス
----------------------------------------
データベース	Modelクラス
----------------------------------------
テーブル名	クラス名（実際は、「アプリ名_クラス名」）
カラム名		クラス変数名
データ型		クラス変数に代入するオブジェクト
制約		Fieldクラスのオプション


Djangoでは、Modelクラスを作成すると、それと同じ内容のテーブルを自動的に作成することができます。


クラス名→テーブル名、クラス変数→カラム名、代入するオブジェクト→データ型
カラム属性や制約条件→オプションとして指定
※デフォルトで「NOT NULL制約」が有効

設定ファイルを修正する

データベースと連携するにはプロジェクト設定ファイルの「settings.py」を編集

どのタイプのデータベースを利用するのか
データベースサーバーのアドレスや
接続に必要なユーザー名やパスワードなどを設定
（デフォルトでSQLiteを利用するよう設定されている。
MySQLやPostgreSQLなど、ほかのデータベースサーバーを利用する場合は、設定する）


「マイグレーション」次に作成したModelクラスを元にデータベースに反映し同期する
（テーブルに対応するようModelクラスを作成し、マイグレーションを実行すると、Modelクラスで作成したのと同じ内容でテーブルが作られます）

デフォルトでは、テーブル名に「Webアプリケーション名_Modelクラス名

データベースからデータを取得しHTMLとして表示するよう、TemplateやViewを作成



