◯-テーブルの作成-------------------------◯
CREATE TABLE テーブル名(カラム名1, カラム名2, ...);「SQLLite」
Djangoに含まれるデータベースシステム
データベースをファイルで管理する簡易的なデータベース


デメリット：
アクセス速度が遅い
同時に処理できるアクセス数が少ない

メリット：
わざわざサーバーを用意する必要がない
データベースの削除もファイルを消すだけで簡単にできる
→開発用途向け

コマンドラインツールを使ってデータベースを作成したり削除したりできる。
SQLクエリーを発行することもできる。


【sqlite3コマンドの実行】
◯-開始---------------------------------◯
$ sqlite3
sqlite>  <--プロンプトが表示されたらSQLを入力できる

◯-終了---------------------------------◯
sqlite> .quit

◯-データベースファイルを開く---------------◯
$ sqlite3 db.sqlite3

◯-SQLiteの設定変数が一覧表示--------------◯
sqlite> .show

◯-SQLiteの管理コマンド-------------------◯
.backup	データベースをバックアップ
.dump	データベースをSQLクエリー形式でダンプ
.help	ヘルプ画面を表示
.import	データをファイルからインポート
.mode	クエリーの出力モードを変更
.read	ファイルからSQLクエリーを読み込み実行
.schema	CREATE文を表示
.show	設定変数を一覧表示
.table	テーブルを一覧表示
.width	表示する時のカラム毎の幅を設定

◯-テーブルの作成-------------------------◯
CREATE TABLE テーブル名(カラム名1, カラム名2, ...);
※カラムの間に「,（カンマ）」を、クエリーの最後に「;（セミコロン）」

SQLiteで利用できるデータ型
------------------------
NULL	NULL値
INTEGER	符号付整数
REAL	浮動小数点数
TEXT	テキスト
BLOB	Binary Large OBject（バイナリー形式）

◯-データを挿入-------------------------◯
INSERT INTO テーブル名 VALUES(値1, 値2, ...);
例：
INSERT INTO test_table (id,memo) VALUES (101,'最初のメモ');

※全カラムデータを登録する（1部のカラムだけではなく）場合は、次のようにカラム名を省略可
INSERT INTO test_table VALUES (101,'最初のメモ');
INSERT INTO test_table VALUES (102,'2つ目のメモ');
INSERT INTO test_table VALUES (103,'眠くなったときのメモ');
INSERT INTO test_table VALUES (104,'元気いっぱいのメモ');
INSERT INTO test_table VALUES (105,'感動中のメモ');


◯-データを抽出-------------------------◯
SELECT カラム名1, カラム名2, ... FROM テーブル名;
例：select * from test_table;

⭐︎表示方法を変える-----⭐︎
.mode 出力モード
例：.mode line
line形式／column形式／HTML形式／CSV形式、など

⭐︎条件付きでデータの抽出-----⭐︎
「SELECT」文に「WHERE」句を付け加える

例：
SELECT * FROM test_table WHERE id > 103;
SELECT * FROM test_table WHERE memo like '%感動%';	//曖昧検索

⭐︎表示する件数を限定-----⭐︎
「SELECT」文に「limit」句を加える「limit [表示オフセット],[表示数]」
※オフセットは0からカウント

◯-データを更新-----------------------◯
UPDATE テーブル名 SET カラム名1 = 値1, カラム名2 = 値2, ... WHERE 条件式;
条件を指定しないと全データが更新されてしまうため、更新したいデータを「WHERE」句で指定
例：update test_table set memo='2つ目のメモを書き換える' where id=102;

◯-データを削除する--------------------◯
DELETE FROM テーブル名 WHERE 条件式;
条件を指定しないと全データが削除されてしまうため、削除したいデータを「WHERE」句で指定
例：delete from test_table  where id=102;







