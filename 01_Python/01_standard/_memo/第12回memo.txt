NumPy:
多次元配列を操作するための数学関数（線形代数）ライブラリー


次元が「軸（axis）」、軸の数を「ランク（rank）」と呼ぶ。こちらは3次元（3ランク）↓
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])


np.zeros( (3,4) )：3行4列の0埋まりの配列
np.ones( (3,4) )：3行4列の1埋まりの配列

np.empty( (2,3) ):2行3列の未初期化の配列
※2番めの引数に、データ型を「dtype=データ型」の形式で指定するとデータ型指定ができる。
※0や1で埋まった配列の生成は、少なからずCPUリソースを消費しますが、
未初期化の配列ならCPUに負荷をかけずに瞬時に作成することができる。

np.arange(要素数)
指定要素数をもつ配列を作る。3番目の引数にカウントアップ幅の指定が可能。
※1次元の配列を作る。多次元にするには別途。
np.arange(0,10,2)


.reshape()
入れえつの形状を変形（1次元を3次元にするなど）

np.arange(24).reshape(2,3a,4)
配列数24個の1次元配列を2つの3行4列（3次元配列）に変換
列数を「-1」と指定すると行数にあわせて、自動的に列数が算出


省略されているのを全体表示させたい場合は、
配列全体を表示させたい場合は、set_printoptions( )関数を用いて印字オプションの「threshold」を「np.inf」に変更

>>np.set_printoptions(threshold=np.inf)
>>print(np.arange(1000).reshape(10,-1))


* / - + といった算術演算子を用いて、配列同士、または配列とスカラーとの演算が可能

行列数が一致していれば、要素どうしで計算が可能。

np.dot(A,B)
行列の積（直積）


型が異なる配列同士を演算すると、演算結果はより精度の高い方に
(intとfloatなど）

.sum(), .min(), .max(), 
.mean():平均
.std():標準偏差
.var():分散

ランダム数値データ10件
np.random.random(10)

------------------------------------------------------------------------------------
[pandas]

アクセス方法			構文		戻り型
行データを行数（インデックス）	df.iloc[行数]	Series
行データを行数（スライス）		df[行数前:行数後]	DataFrame


✨
TSVファイルに書き出す場合、
to_csv()関数の第2引数に「sep="\t"」を指定し、
区切り文字にタブ文字を使うよう「to_csv("ファイル名",sep="\t")」



describe( )関数
2次元テーブルの各列に対し、要素数／最大値／最小値／平均などの統計情報を算出
結果を新しいDataFrameに格納。






