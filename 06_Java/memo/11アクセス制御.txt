アクセス制御の修飾子（access cotrol）
▶対象とするフィールドやメゾッド、クラスなどにアクセスできる範囲を制御すること。

				public	protected　　　指定なし	private
全てのクラスからアクセス可能		〇	〇		〇	〇
サブクラスからの参照可能		〇	〇		〇	×
同じパッケージ内のクラスからの参照	〇	〇		×	×
同じクラスからの参照		〇	×		×	×

※クラスについては、pbulicか指定なし（何もつかない）のいずれか。
サブクラス、パッケージは後日談。


→データの隠蔽（data hiding）クラス内のフィールドに対して、private を付けることで、クラスの持つデータを外部に対して隠すこと。
フィールドにprivate修飾子を付けると、クラスの外からは、参照が出来なくなる。
※参照しようとすると、「〇は○○でprivateアクセスされます。」
※private を付けない場合、アクセスできる範囲に違いはないが、外に公開されている状態。

▶カプセル化（オブジェクト指向の特徴の一つ）（encapsulation）
データ隠蔽を行ったクラスに対して、クラスの持つフィールドにアクセスするためのメゾッドを追加する。

読み取り専用→引数なしで、return フィールド要素	※▶getter(フィールドの値を得るメゾッド)
書き込み→引数が書き込む値、this.フィールド要素 = 引数	※▶setter(フィールドに値を設定するためのメゾッド)

で可能。※同クラス内で宣言しているので、private を付けたフィールドの読み書きが可能になる。
この読み書き用のメゾッドを呼び出す。※読み書き用のメゾッドはpublicをつけておく。どこからでも参照可能。


※getter setterを合わせて、accessor(アクセサ)と呼ぶことがある。

カプセル化（encapusulation）
プログラムの信頼性、保守性を高めることが出来る。



※コンストラクタは、クラスと同名にしておく必要がある。
出ないと、メゾッドとして認識されてしまう。

printfメゾッド▶
文字列や数値などを指定した書式で画面に出力することができます。※printメゾッドだとできない？
C言語のpirntfメゾッドをもとに作られている。
https://www.sejuku.net/blog/43246

インスタンスフィールド(いんすたんすごとに生成されるフィールド。)
クラスフィールド（クラス内で共有されるフィールド。staticを付けて作成する）

インスタンスメゾッド(インスタンスを生成する。インスタンスごとに生成される。)
クラスメゾッド(インスタンスに依存しないメゾッド)


Mathメゾッドは、クラスメゾッド
自然対数の底e:Math.E	円周率π:Math.pr

staticが付いているメゾッドやクラスからは、staticつきのみアクセスできる。
※アクセス制御もk￥担う。
static：静的


https://www.sejuku.net/blog/43246